import * as THREE from 'three'
import React, { Suspense, useRef, useState, useEffect } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import { Html, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei'

import JnfPro from './JnfPro'
import gsap from 'gsap'

function Model(props) {
  
  const firstRender = useRef(true)
  // Load model
  const { nodes, materials } = useGLTF('/laptop.glb')


  // Make it float


  useFrame((state) => {
    const t = state.clock.getElapsedTime();

    props.group.current.rotation.x = THREE.MathUtils.lerp(props.group.current.rotation.x, Math.cos(t / 2) / 20 + 0.25, 0.1)
    props.group.current.rotation.y = THREE.MathUtils.lerp(props.group.current.rotation.y, Math.sin(t / 4) / 20, 0.1)
    props.group.current.rotation.z = THREE.MathUtils.lerp(props.group.current.rotation.z, Math.sin(t / 8) / 20, 0.1)
    props.group.current.position.y = THREE.MathUtils.lerp(props.group.current.position.y, (-2 + Math.sin(t / 2)) / 2, 0.1)
    if (firstRender.current) {
      firstRender.current = false
      console.log('first')
      setinit(props.group.current)
    }

  })


  const onScreenHover = () => {
    gsap.to(props.group.current.position, {
      Z:3,
      duration: 4

    })

  }

  const onScreenHoverOut = () => {
    console.log(props.group.current.position)
    //console.log(props.group.current.position);

    gsap.to(props.group.current.position, {
      y: -1.3,
      z: 0,
      duration: 3,
      onComplete: function () {

      }
    })
  }

  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  return (
    <group ref={props.group} {...props} dispose={null}>
      <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
        <mesh material={materials.ksdev} geometry={nodes.ksdev.geometry} rotation={[Math.PI / 2, 0, 0]} position={[0.1, 3, -0.3]} />
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />

          {/* Drei's HTML component can "hide behind" canvas geometry */}
          <mesh geometry={nodes['Cube008_2'].geometry}>
            <Html className="content" rotation-x={-Math.PI / 2} position={[0, 0.05, -0.09]} transform occlude>
              <div onMouseEnter={onScreenHover} className="wrapper" onPointerDown={(e) => e.stopPropagation()}>
                <JnfPro />
              </div>
            </Html>
          </mesh>
        </group>
      </group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )
}

export default function App() {
  const group = useRef();


  return (
    <div className="flex-1 w-full h-full">
      <Canvas id="canva1" camera={{ position: [-5, 0, -15], fov: 55 }}>
        <pointLight position={[10, 10, 10]} intensity={1.5} />
        <Suspense fallback={null}>
          <group rotation={[0, Math.PI, 0]} position={[0, 1, 0]}>
            <Model  group={group} />
          </group>
          <Environment preset="night" />
        </Suspense>
        <ContactShadows position={[0, -4.5, 0]} scale={20} blur={2} far={4.5} />
        <OrbitControls enablePan={false} enableZoom={false} minPolarAngle={Math.PI / 2.2} maxPolarAngle={Math.PI / 2.2} />
      </Canvas>
    </div>
  )
}
